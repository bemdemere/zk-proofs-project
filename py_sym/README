# **Zero-Knowledge Authentication Using Graph 3-Coloring**

## **Project Description**
This project implements a **zero-knowledge proof (ZKP) authentication system** using the **Graph 3-Coloring problem** as the authentication challenge.

- UsersS authenticate by proving they **know a valid coloring** for a predefined graph **without revealing the coloring itself**.
- The system uses **ZoKrates** to generate zkSNARK proofs, allowing verification without exposing the user’s secret credentials.
- The backend is implemented in **Flask**, handling proof verification and user authentication.
- The frontend will provide a **web-based login interface** for users to authenticate using zero-knowledge proofs.

## **Project Structure**
```
zk-auth/
│── server/                  # Backend server handling authentication & proof verification
│   ├── app.py               # Flask server handling API requests
│   ├── verifier.py          # Calls ZoKrates to verify proofs
│   ├── graph_data.json      # store user-graph mappings (predefined graphs for authentication)
│── client/                  # Frontend 
│── test/                    # Unit tests 
│── zokrates-circuit/        system
│   ├── authcircuit.zok       # circuit for 3-coloring proof 
│── README.md                # Documentation (this file)
```

## **System Design**
### **What the Code Does So Far**
**Backend (Flask Server)**
- Loads predefined **graphs per user** from `graph_data.json`.
- Accepts authentication requests where users submit:
  - **Username** (public identifier).
  - **Secret coloring** (private, proves authentication).
- Uses **ZoKrates** to:
  1. Compute a **witness** (hidden proof data).
  2. Generate a **zkSNARK proof**.
  3. Verify the proof against the user’s assigned graph.
- Responds with **authentication success/failure** based on proof verification.

**ZoKrates Circuit** (`authcircuit.zok`)
- Defines the **graph 3-coloring problem** as an arithmetic circuit.
- Ensures that the user’s coloring **satisfies** the graph constraints:
  - **Each node gets a valid color (0,1,2).**
  - **Adjacent nodes do not share the same color.**

# How to run this local simulator

The following explains how to run the zero-knowledge login simulator using `client.py` and ZoKrates within a Docker container.

---

## 1. Requirements

- Docker installed
- Python 3 installed (create 3.11 python environment (`zk_env`))
- Terminal located in the project root (the directory containing `client.py` and `circuit_dynamic.zok`)

---

## 2. Overview

The system performs the following steps:

1. The client creates a 3-colorable graph based on a username, password, and salt.
2. It generates circuit inputs and creates a witness.
3. It generates a zk-SNARK proof.
4. The server verifies the proof using public inputs.

No sensitive data (e.g., passwords or graph coloring) is exposed.

---

## 3. Run Instructions

### Step 1: Execute the Client Script

Run the following command to generate the circuit and input data:

```bash
python3 client.py
```

This script generates the following files:

- `client/circuit_dynamic.zok`: The circuit source
- `client/input.txt`: Circuit inputs for proof generation

### Step 2: Start the ZoKrates Docker Container

From the project root directory:

```bash
docker run --rm -v $(pwd):/home/zokrates/code -w /home/zokrates/code -ti zokrates/zokrates
```

You are now inside the ZoKrates container in the `/home/zokrates/code` directory.

### Step 3: Compile the Circuit

Only required once unless the circuit is modified:

```bash
zokrates compile -i client/circuit_dynamic.zok
```

### Step 4: Compute the Witness

Change into the client directory:

```bash
cd client/
```

Run the witness computation:

```bash
zokrates compute-witness -a $(cat input.txt)
```

This generates the `witness` file.

### Step 5: Generate the Proof

```bash
zokrates generate-proof
```

This creates `proof.json`.

### Step 6: Verify the Proof

```bash
zokrates verify
```

Expected output:

```
Performing verification...
PASSED
```

---

## 4. File Summary

| File | Purpose |
|------|---------|
| `client.py` | Generates circuit inputs from user credentials |
| `circuit_dynamic.zok` | The ZoKrates circuit code |
| `input.txt` | Input data for ZoKrates CLI |
| `witness` | Witness file for proof generation |
| `proof.json` | zk-SNARK proof to be verified |

---

## 6. TODO: Refactor for Real User Signup and Login

To separate the logic for user signup and login, divide the simulator into the following sections:

### Signup (`register_user`)
- Input: `username`, `password`, `salt`
- Compute: hash preimage, graph, coloring
- Output:
  - `stored_hash` → stored on server
  - `graph_edges` → stored on server
- Save the user data in a database or JSON file

### Login (`login_user`)
- Input: `username`, `password`, `salt`
- Reconstruct same preimage
- Generate: input.txt, witness, proof.json
- Send proof + public inputs to the server
- Server verifies using `zokrates verify`

### Flask API Endpoints
- `/register`: Accepts user credentials and stores public data
- `/login`: Accepts proof and public inputs, runs `zokrates verify`, and returns login status

